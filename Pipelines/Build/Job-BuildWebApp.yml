# File        : Build-WebApp.yml
# Description : Contains a job that builds the ASP .NET 6 web app.

parameters:
- name: jobName
  type: string  
- name: buildConfiguration
  type: string
  default: 'Release'

jobs:
- job: ${{ parameters.jobName }}
  displayName: 'Build ASP.NET Web App'
  
  pool:
    vmImage: ubuntu-latest

  container: mcr.microsoft.com/dotnet/sdk:6.0

  variables:
    DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 'true' # perf improvement on hosted agents
    projectsToBuild:        'Application/**/*.csproj'
    projectsToTest:         'Application/**/*Tests/*.csproj'
    functionalTestsFolder:  'Application/aspnet-core-sample.FunctionalTests'
    sdkVersion:             '6.0.100'

  steps:

  # --------------------------------------------------------------------------------
  # Publish: WebApp
  # --------------------------------------------------------------------------------
  # When not running in container, uncomment the following:
  # https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/tool/dotnet-core-tool-installer?view=azure-devops
  # - task: UseDotNet@2
  #   displayName: 'Install .NET Core SDK $(sdkVersion)'
  #   inputs:
  #     version: $(sdkVersion)
  #     packageType: sdk
  #     #performMultiLevelLookup: true # to use installed .NET Core runtime

  # https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/build/dotnet-core-cli
  - task: DotNetCoreCLI@2
    displayName: 'dotnet restore'
    inputs:
      command: 'restore'
      projects: '$(projectsToBuild)'
      # feedsToUse: 'select'
      # vstsFeed: 'f3d2d824-8fba-4de4-ae0e-9b8c845be4f3'
      # includeNuGetOrg: false

  # https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/build/dotnet-core-cli
  - task: DotNetCoreCLI@2
    displayName: 'dotnet build'
    inputs:
      command: build
      projects: '$(projectsToBuild)'
      arguments: '--configuration ${{ parameters.buildConfiguration }} --no-restore' # Update this to match your need

  # https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/build/dotnet-core-cli
  # Note: Install coverlet.collector package to test projects
  - task: DotNetCoreCLI@2
    displayName: 'dotnet test'
    inputs:
      command: test
      projects: '$(projectsToTest)'
      arguments: >
        --configuration ${{ parameters.buildConfiguration }}
        --no-restore
        --no-build
        --filter TestCategory!=UI
        --collect:"XPlat Code Coverage"
        -- RunConfiguration.DisableAppDomain=true
        --settings $(Build.SourcesDirectory)/Application/aspnet-core-sample.UnitTests/CodeCoverage.runsettings
      publishTestResults: true
      testRunTitle: 'Unit Tests'

    # https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/build/dotnet-core-cli
  - task: DotNetCoreCLI@2
    displayName: Install ReportGenerator tool
    inputs:
      command: custom
      custom: tool
      arguments: install --tool-path . dotnet-reportgenerator-globaltool

  # https://docs.microsoft.com/en-us/dotnet/core/testing/unit-testing-code-coverage
  - script: ./reportgenerator -reports:$(Agent.TempDirectory)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/coverlet/reports -reporttypes:"Cobertura"
    displayName: Create reports
    
  # https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/test/publish-code-coverage-results
  - task: PublishCodeCoverageResults@1
    displayName: 'Publish code coverage'
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: $(Build.SourcesDirectory)/coverlet/reports/Cobertura.xml  

  # Publish: WebApp
  - task: DotNetCoreCLI@2
    displayName: 'dotnet publish'
    inputs:
      command: publish
      projects: '$(projectsToBuild)'
      arguments: '--configuration ${{ parameters.buildConfiguration }} --output $(Build.StagingDirectory)/WebApp --no-restore --no-build'
      publishWebProjects: false
      zipAfterPublish: true
      modifyOutputPath: false

  - publish: $(Build.StagingDirectory)/WebApp
    displayName: 'Publish artifact: WebApp'
    artifact: WebApp

# --------------------------------------------------------------------------------
# Publish: FunctionalTests
# --------------------------------------------------------------------------------
  - task: DotNetCoreCLI@2
    displayName: 'dotnet publish *FunctionalTests*.csproj'
    inputs:
      command: publish
      projects: '$(functionalTestsFolder)/*.csproj'
      arguments: '--configuration ${{ parameters.buildConfiguration }} --output $(Build.StagingDirectory)/FunctionalTests --no-restore --no-build'
      publishWebProjects: false
      zipAfterPublish: false
      modifyOutputPath: false

  # https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/utility/copy-files
  - task: CopyFiles@2
    displayName: "Copy .runsettings file"
    inputs:
      SourceFolder: '$(functionalTestsFolder)'
      Contents: '*.runsettings'
      TargetFolder: '$(Build.StagingDirectory)/FunctionalTests'

  - template: Templates/Steps/Check-FileExists.yml
    parameters:
      filename: '$(Build.StagingDirectory)/FunctionalTests/functionalTests.runsettings'

  - publish: $(Build.StagingDirectory)/FunctionalTests
    displayName: 'Publish artifact: FunctionalTests'
    artifact: FunctionalTests

# --------------------------------------------------------------------------------
# Publish: DeployScripts
# --------------------------------------------------------------------------------
  - publish: $(Build.SourcesDirectory)/Pipelines/DeployScripts
    displayName: 'Publish artifact: DeployScripts'
    artifact: DeployScripts
